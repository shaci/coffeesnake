// Generated by CoffeeScript 1.3.3
(function() {
  var DOWN, LEFT, RIGHT, UP, caneat, createGameField, direction, downMovePossible, endGame, fieldHeight, fieldWidth, gameField, gameOverIndicator, getRandNum, go, grow, leftMovePossible, move, moveSnake, newGame, placeEat, pointIndicator, points, rightMovePossible, snake, start, startX, startY, upMovePossible, xeatcoord, yeatcoord;

  alert(1);

  pointIndicator = null;

  points = 0;

  gameOverIndicator = null;

  newGame = null;

  fieldWidth = 80;

  fieldHeight = 30;

  gameField = null;

  startX = 40;

  startY = 15;

  caneat = false;

  LEFT = 1;

  UP = 2;

  RIGHT = 3;

  DOWN = 4;

  direction = RIGHT;

  snake = [[startX, startY], [startX - 1, startY], [startX - 2, startY]];

  xeatcoord = null;

  yeatcoord = null;

  go = null;

  createGameField = function() {
    var row, table, tbody, td, th, thead, _i, _j, _k;
    table = document.createElement("table");
    table.id = "snake";
    thead = document.createElement("thead");
    thead.appendChild(row = document.createElement("tr"));
    for (_i = 0; _i < 3; _i++) {
      row.appendChild(th = document.createElement("th"));
      if (!_i) {
        th.colSpan = 20;
        pointIndicator = document.createElement("span");
        pointIndicator.innerHTML = "POINTS: " + 0;
        th.appendChild(pointIndicator);
      } else if (_i === 1) {
        th.colSpan = 40;
        newGame = document.createElement("span");
        newGame.innerHTML = "START";
        newGame.style.cursor = "pointer";
        th.appendChild(newGame);
        newGame.onclick = function() {
          return start();
        };
      } else {
        gameOverIndicator = document.createElement("span");
        gameOverIndicator.style.color = "red";
        th.appendChild(gameOverIndicator);
        th.colSpan = 20;
      }
    }
    gameField = tbody = document.createElement("tbody");
    for (_j = 0; 0 <= fieldHeight ? _j < fieldHeight : _j > fieldHeight; 0 <= fieldHeight ? _j++ : _j--) {
      tbody.appendChild(row = document.createElement("tr"));
      for (_k = 0; 0 <= fieldWidth ? _k < fieldWidth : _k > fieldWidth; 0 <= fieldWidth ? _k++ : _k--) {
        row.appendChild(td = document.createElement("td"));
      }
    }
    table.appendChild(thead);
    table.appendChild(tbody);
    return document.body.appendChild(table);
  };

  document.body.onkeydown = function(e) {
    e = e || window.event;
    switch (e.keyCode) {
      case 37:
        if (direction !== RIGHT) {
          return direction = LEFT;
        }
        break;
      case 38:
        if (direction !== DOWN) {
          return direction = UP;
        }
        break;
      case 39:
        if (direction !== LEFT) {
          return direction = RIGHT;
        }
        break;
      case 40:
        if (direction !== UP) {
          return direction = DOWN;
        }
    }
  };

  move = function() {
    var canmove;
    canmove = false;
    switch (direction) {
      case LEFT:
        canmove = leftMovePossible();
        break;
      case RIGHT:
        canmove = rightMovePossible();
        break;
      case DOWN:
        canmove = downMovePossible();
        break;
      case UP:
        canmove = upMovePossible();
    }
    if (canmove) {
      if (caneat) {
        grow();
        caneat = false;
        return placeEat();
      } else {
        return moveSnake();
      }
    } else {
      return endGame();
    }
  };

  leftMovePossible = function() {
    if (snake[0][0] - 1 < 0 || gameField.rows[snake[0][1]].cells[snake[0][0] - 1].className === "snakeBody") {
      return false;
    }
    if (gameField.rows[snake[0][1]].cells[snake[0][0] - 1].className === "eat") {
      caneat = true;
    }
    return true;
  };

  rightMovePossible = function() {
    if (snake[0][0] + 1 === fieldWidth || gameField.rows[snake[0][1]].cells[snake[0][0] + 1].className === "snakeBody") {
      return false;
    }
    if (gameField.rows[snake[0][1]].cells[snake[0][0] + 1].className === "eat") {
      caneat = true;
    }
    return true;
  };

  downMovePossible = function() {
    if (snake[0][1] + 1 === fieldHeight || gameField.rows[snake[0][1] + 1].cells[snake[0][0]].className === "snakeBody") {
      return false;
    }
    if (gameField.rows[snake[0][1] + 1].cells[snake[0][0]].className === "eat") {
      caneat = true;
    }
    return true;
  };

  upMovePossible = function() {
    if (snake[0][1] - 1 < 0 || gameField.rows[snake[0][1] - 1].cells[snake[0][0]].className === "snakeBody") {
      return false;
    }
    if (gameField.rows[snake[0][1] - 1].cells[snake[0][0]].className === "eat") {
      caneat = true;
    }
    return true;
  };

  moveSnake = function() {
    var _i, _j, _ref, _ref1, _results;
    for (_i = 0, _ref = snake.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
      gameField.rows[snake[_i][1]].cells[snake[_i][0]].className = "";
    }
    snake.pop();
    snake.unshift([snake[0][0], snake[0][1]]);
    switch (direction) {
      case LEFT:
        snake[0][0] -= 1;
        break;
      case RIGHT:
        snake[0][0] += 1;
        break;
      case DOWN:
        snake[0][1] += 1;
        break;
      case UP:
        snake[0][1] -= 1;
    }
    _results = [];
    for (_j = 0, _ref1 = snake.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? _j++ : _j--) {
      _results.push(gameField.rows[snake[_j][1]].cells[snake[_j][0]].className = "snakeBody");
    }
    return _results;
  };

  grow = function() {
    snake.unshift([snake[0][0], snake[0][1]]);
    switch (direction) {
      case LEFT:
        snake[0][0] -= 1;
        break;
      case RIGHT:
        snake[0][0] += 1;
        break;
      case DOWN:
        snake[0][1] += 1;
        break;
      case UP:
        snake[0][1] -= 1;
    }
    gameField.rows[snake[0][1]].cells[snake[0][0]].className = "snakeBody";
    return pointIndicator.innerHTML = "POINTS: " + ++points;
  };

  placeEat = function() {
    xeatcoord = getRandNum(0, fieldWidth - 1);
    yeatcoord = getRandNum(0, fieldHeight - 1);
    while (gameField.rows[yeatcoord].cells[xeatcoord].className === "snakeBody") {
      xeatcoord = getRandNum(0, fieldWidth - 1);
      yeatcoord = getRandNum(0, fieldHeight - 1);
    }
    return gameField.rows[yeatcoord].cells[xeatcoord].className = "eat";
  };

  endGame = function() {
    gameOverIndicator.innerHTML = "YOU LOOSE";
    return clearInterval(go);
  };

  getRandNum = function(min, max) {
    var rand;
    rand = min - 0.5 + Math.random() * (max - min + 1);
    return Math.round(rand);
  };

  createGameField();

  start = function() {
    var _i, _j, _ref, _ref1;
    for (_i = 0, _ref = snake.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
      gameField.rows[snake[_i][1]].cells[snake[_i][0]].className = "";
    }
    snake = [[startX, startY], [startX - 1, startY], [startX - 2, startY]];
    clearInterval(go);
    if (xeatcoord !== null) {
      gameField.rows[yeatcoord].cells[xeatcoord].className = "";
    }
    direction = RIGHT;
    pointIndicator.innerHTML = "POINTS: " + 0;
    points = 0;
    gameOverIndicator.innerHTML = "";
    for (_j = 0, _ref1 = snake.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? _j++ : _j--) {
      gameField.rows[snake[_j][1]].cells[snake[_j][0]].className = "snakeBody";
    }
    placeEat();
    return go = setInterval(move, 100);
  };

  start();

}).call(this);
